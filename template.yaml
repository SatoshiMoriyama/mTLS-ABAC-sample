AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample API for mTLS-ABAC
Parameters:
  StageName:
    Type: String
    Default: Prod
    Description: APIのデプロイステージ名
  BasePath:
    Type: String
    Default: v1
    Description: APIのベースパス
  DomainName:
    Type: String
    Description: APIのカスタムドメイン名
  CertificateArn:
    Type: String
    Description: カスタムドメイン用のACMにあるSSL証明書のARN
  HostedZoneId:
    Type: String
    Description: ドメインのRoute53ホストゾーンID
    Default: ""
  TrustStoreBucketURI:
    Type: String
    Description: TrustStoreの格納バケットURI
  TrustStoreObjectKey:
    Type: String
    Description: TrustStoreのオブジェクトキー名

Globals:
  Function:
    Timeout: 3

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizer/
      Handler: app.authorizerHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "execute-api:Invoke"
              Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*"

  HelloWorldFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HelloWorldFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/${StageName}/GET/hello"

  AuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/authorizers/*"

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Auth:
        Authorizers:
          mTLSAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Host
            AuthorizerResultTtlInSeconds: 300
            FunctionPayloadType: REQUEST
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZoneId
        BasePath:
          - !Ref BasePath
        MutualTlsAuthentication:
          TruststoreUri: !Ref TrustStoreBucketURI
          TruststoreVersion: !Ref TrustStoreObjectKey
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "MyMtlsApi"
          version: "1.0"
        securityDefinitions:
          mTLSAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              type: "request"
              authorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations"
              authorizerResultTtlInSeconds: 300
              identitySource: "method.request.header.Authorization"
        paths:
          /hello:
            get:
              security:
                - mTLSAuthorizer: []
              produces:
                - "application/json"
              responses:
                "200":
                  description: "成功レスポンス"
                  schema:
                    type: "object"
                "400":
                  description: "Bad Request"
                "500":
                  description: "Internal Server Error"
              x-amazon-apigateway-integration:
                type: "aws"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations"
                httpMethod: "POST"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                timeoutInMillis: 29000
                requestTemplates:
                  application/json: |
                    {
                      "body": $input.json('$'),
                      "headers": {
                        #foreach($header in $input.params().header.keySet())
                        "$header": "$util.escapeJavaScript($input.params().header.get($header))"#if($foreach.hasNext),#end
                        #end,
                        "X-Client-Cert-Subject":"$context.authorizer.principalId" 
                      },
                      "queryStringParameters": {
                        #foreach($param in $input.params().querystring.keySet())
                        "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"#if($foreach.hasNext),#end
                        #end
                      },
                      "pathParameters": {
                        #foreach($param in $input.params().path.keySet())
                        "$param": "$util.escapeJavaScript($input.params().path.get($param))"#if($foreach.hasNext),#end
                        #end
                      }
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        $input.json('$')
                  ".*Bad Request.*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: |
                        {
                          "error": "Bad Request",
                          "message": $input.json('$.errorMessage')
                        }
                  ".*Internal Server Error.*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: |
                        {
                          "error": "Internal Server Error",
                          "message": $input.json('$.errorMessage')
                        }
Outputs:
  CustomDomainEndpoint:
    Description: "カスタムドメインエンドポイントのURL"
    Value: !Sub "https://${DomainName}/${BasePath}/hello"
  HelloWorldFunction:
    Description: "Hello World Lambda関数のARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/hello"
